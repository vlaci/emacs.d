#+TITLE: vlaci's Emacs configuration

This repository is written using literate programming. All code necessary to develop it and run Emacs is generated from this =README=.

* How-to

This repository uses [[https://github.com/direnv/direnv][direnv]] together with [[https://github.com/target/lorri][lorri]] to automatically create a development shell. It is an optional tool, just using =nix develop= works as well. To help running common development tasks, the following [[https://github.com/casey/just][just]] is needed.

You can see what commands are available with their short description by running =just help=:
#+begin_src sh :tangle no :results output :wrap example :exports results
  just help
#+end_src

#+RESULTS:
#+begin_example
Available recipes:
    help   # Print help
    try
    tangle
#+end_example

** Under the hoods
To set-up =lorri=, we define this =.envrc=:

#+begin_src sh :tangle .envrc
  if type lorri &>/dev/null; then
      echo "direnv: using lorri"
      eval "$(lorri direnv)"
      IN_LORRI_SHELL= eval "$shellHook"
  else
      # fall back to using direnv's builtin nix support
      # to prevent bootstrapping problems.
      use nix
  fi
#+end_src

You need to tell =direnv= to trust this this code:

#+begin_src sh :tangle no
  direnv allow
#+end_src

Now everything is set-up to be able to run the following =justfile=

#+begin_src makefile :tangle justfile
  # Print help
  help:
      just --list --unsorted

  try:
      #!/bin/sh -e
      OUT=$(mktemp -u --suffix .result)
      echo "Building into $OUT..."
      trap "rm -f $OUT" EXIT
      NIXPKGS_ALLOW_UNFREE=1 nix build --impure --out-link $OUT
      $OUT/bin/emacs --debug-init

  tangle:
      #!/usr/bin/env nix-shell
      #!nix-shell -p emacs -i "emacs --script"
      (require 'ob-tangle)
      (org-babel-tangle-file "README.org" nil "makefile\\|sh")
#+end_src

* early-init
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
Early init is loaded before graphics subsystem is initialized so it makes sense
to disable UI elements from it. Lifted from ~doom-emacs~
#+begin_src emacs-lisp
;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** initialization
#+begin_src emacs-lisp
  (setq ;; don't add that `custom-set-variables' block to my initl!
   package--init-file-ensured t
   vc-follow-symlinks nil
   custom-file (expand-file-name "settings.el" user-emacs-directory))

  (defun vl/display-startup-time ()
    (message "‚è± Emacs started in %s seconds with %d garbage collections."
             (emacs-init-time)
             gcs-done))
  (add-hook 'emacs-startup-hook #'vl/display-startup-time)
#+end_src
*** use-package
#+begin_src emacs-lisp
  (eval-and-compile
    (require 'bind-key)
    (require 'use-package))
  (setq use-package-always-defer nil
        use-package-verbose nil
        use-package-compute-statistics nil
        use-package-expand-minimally t)
  (package-activate-all)
#+end_src

*** Server

#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :when (display-graphic-p)
    :defer 1
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src

*** No-littering
#+begin_src emacs-lisp
  (use-package no-littering
      :demand t
      :init
      (setq user-emacs-directory (expand-file-name "~/.cache/emacs/"))
      ;; if something wouldn't have been native compiled at build time
      (add-to-list 'native-comp-eln-load-path (concat user-emacs-directory "eln-cache")))
#+end_src
** UI setup

Do not show the default welcome screen.

#+begin_src emacs-lisp
  (setq use-dialog-box nil)

  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message user-login-name
        inhibit-default-init t
        inhibit-startup-sceen t
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil)
#+end_src

For popup management

#+begin_src emacs-lisp
  (use-package popper
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :hook (after-init . popper-mode)
    :config
    ;;(setq popper-group-function #'popper-group-by-project)
    :init
    (setq popper-display-control nil)
    (setq popper-reference-buffers
          '("\\*Warning"
            "Output\\*\\'"
            "\\*Backtrace\\*"
            messages-buffer-mode
            help-mode
            helpful-mode
            compilation-mode)))

  (use-package shackle
    :hook (after-init . shackle-mode)
    :init
    ;; https://mullikine.github.io/posts/making-shackle-split-sensibly/
    ;; This function is derived from split-window-sensibly
    (defun vl-shackle-sensible-alignment (&optional window)
      (interactive)
      (let ((window (or window (selected-window))))
        (or (and (window-splittable-p window)
                 'below)
            (and (window-splittable-p window t)
                 'right)
            (and
             ;; If WINDOW is the only usable window on its frame (it is
             ;; the only one or, not being the only one, all the other
             ;; ones are dedicated) and is not the minibuffer window, try
             ;; to split it vertically disregarding the value of
             ;; `split-height-threshold'.
             (let ((frame (window-frame window)))
               (or
                (eq window (frame-root-window frame))
                (catch 'done
                  (walk-window-tree (lambda (w)
                                      (unless (or (eq w window)
                                                  (window-dedicated-p w))
                                        (throw 'done nil)))
                                    frame)
                  t)))
             (not (window-minibuffer-p window))
             (let ((split-height-threshold 0))
               (when (window-splittable-p window)
                 'below))))))

    (setq shackle-rules
          '(
            ((help-mode helpful-mode)
             :noselect t :align right :size 0.5)
            ("*company-documentation*" :noselect t :align right :size 0.3)
            ((messages-buffer-mode "\\`\\*Backtrace\\*" "\\`\\*Warnings\\*" "Output\\*\\'")
             :noselect t :regexp t :align cl-shackle-sensible-alignment :size 0.3))))
#+end_src

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

*** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (window-setup . doom-modeline-mode)
    :hook (doom-modeline-mode . size-indication-mode)
    :hook (doom-modeline-mode . column-number-mode)
    :init
    (setq doom-modeline-hud t
          doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+end_src
*** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :custom-face
    (fringe ((t (:inherit default :foreground "#8FBCBB")))) ; for doom-nord + dap-mode
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t ; if nil, italics is universally disabled
          doom-nord-brighter-modeline t)
    (load-theme 'doom-nord t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;;;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

#+begin_src emacs-lisp
  (use-package leuven-theme)
#+end_src
** Key binding
#+begin_src emacs-lisp
  (use-package evil
    :hook
    (after-init . evil-mode )
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll nil ;; C-b scrolls symilarly
          evil-want-C-i-jump nil
          evil-undo-system 'undo-tree
          evil-want-fine-undo t
          evil-search-module 'isearch)
    :config
    (use-package undo-tree
      :init (setq undo-tree-auto-save-history t)
      :config (global-undo-tree-mode))

    (defun vl/set-shift-width ()
      (setq evil-shift-width tab-width))
    (add-hook 'after-change-major-mode-hook #'vl/set-shift-width)
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    (evil-set-initial-state 'messages-buffer-mode 'normal)

    )
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)

#+end_src

In visual mode =S<textobj>=, =gS<textobj>,= in normal mode =ys<textobj>= or =yS<textobj>=. =cs<textobj><textobj>= and =ds<textobj>= are also DWIM.
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode +1))
#+end_src


#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))

  (use-package evil-easymotion
    :after evil
    :commands evilem-create evilem-default-keybindings
    :config
    (evilem-default-keybindings "g s")
    ;; Use evil-search backend, instead of isearch
    (evilem-make-motion evilem-motion-search-next #'evil-ex-search-next
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-previous #'evil-ex-search-previous
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-word-forward #'evil-ex-search-word-forward
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-word-backward #'evil-ex-search-word-backward
                        :bind ((evil-ex-search-highlight-all nil)))

    ;; Rebind scope of w/W/e/E/ge/gE evil-easymotion motions to the visible
    ;; buffer, rather than just the current line.
    (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
    (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
    (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
    (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
    (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
    (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
    (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
    (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
    (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible))
#+end_src


#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (defun +kill-this-buffer ()
      (interactive)
      (let ((buffer-modified-p nil))
        (kill-buffer (current-buffer))))
    (eval-and-compile
      (general-create-definer global-leader-prefix
        :states '(emacs normal visual motion insert)
        :keymaps 'override
        :prefix "SPC"
        :non-normal-prefix "M-SPC"))
    (global-leader-prefix
      "" '(nil :which-key "my lieutenant general prefix")
      "b" '(:ignore t :which-key "buffers")
      "b d" '+kill-this-buffer
      "f" '(:ignore t :which-key "files")
      "f f" 'find-file
      "g" '(:ignore t :which-key "git")
      "g g" 'magit-status
      "h" '(:ignore t :which-key "help")
      "h f" 'describe-function
      "h k" 'describe-key
      "h m" 'describe-function
      "h s" 'describe-symbol
      "h h" 'describe-at-point
      "h v" 'describe-variable
      "h x" 'describe-command
      "m" '(:ignore t :which-key "bookmarks")
      "w" '(:ignore t :which-key "windows")
      "w d" 'delete-window
      "p" '(:ignore t :which-key "projects")
      "s" '(:ignore t :which-key "search"))
    (general-create-definer local-leader-prefix
      :prefix "SPC m")
    )
#+end_src
** Completion framework
#+begin_src emacs-lisp
  (use-package mini-frame
    :hook (after-init . mini-frame-mode)
    :custom-face
    :custom
    (mini-frame-internal-border-color (face-attribute 'window-divider-first-pixel :foreground nil t))
    (mini-frame-color-shift-step 0)
    (mini-frame-detach-on-hide nil)
    (mini-frame-show-parameters
     '((child-frame-border-width . 1)
       (top . 0.05)
       (width . 0.62)
       (left . 0.5)
       (height . 15))))

  (defun vl/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-kill-word arg)))

  (use-package vertico
    :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . vl/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :hook (after-init . vertico-mode))

  (use-package orderless
    :defer t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package emacs
    :ensure nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package marginalia
    :hook (after-init . marginalia-mode)
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle)))

#+end_src
*** Extra completion
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :general
    (global-leader-prefix
      "b b" '(consult-buffer :wk "Buffers & recents")
      "b n" '(:ignore t :wk "Open buffer in...")
      "b n f" '(consult-buffer-other-frame :wk "New frame")
      "b n w" '(consult-buffer-other-window :wk "New window")
      "f r" '(consult-recent-file :wk "Recent files")
      "h M" '(consult-man :wk "Show a man page")
      "m m" 'consult-bookmark
      "s p" '(consult-ripgrep :wk "Search in project")
      "s i" '(consult-imenu :wk "Go-to item")
      "s o" '(consult-outline :wk "Go-to outline")
      "s s" '(consult-line :wk "Search in current buffer")
      "s /" '(consult-line :wk "Search in current buffer")
      "s &" '(consult-focus-lines :wk "Filter matching lines")
      "s :" '(consult-goto-line :wk "Jump to line number"))
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-project-imenu)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s L" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           :map isearch-mode-map
           ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
           ("M-s l" . consult-line))                 ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Selectrum, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    (setq completion-in-region-function 'consult-completion-in-region)
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    ;;(setq consult-project-root-function
    ;;      (lambda ()
    ;;        (when-let (project (project-current))
    ;;          (car (project-roots project)))))
    ;; 2. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

  (use-package embark
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config
    (defun embark-mini-frame-disable ()
      (mini-frame-mode -1))

    (defun embark-mini-frame-reset ()
      (remove-hook 'embark-pre-action-hook #'embark-mini-frame-disable)
      (mini-frame-mode 1))

    (defun embark-mini-frame-detect (action target &optional quit)
      (unless (memq action '(embark-become
                             embark-collect-live
                             embark-collect-snapshot
                             embark-collect-snapshot
                             embark-export))
        (let ((allow-edit (if embark-allow-edit-default
                              (not (memq action embark-skip-edit-commands))
                            (memq action embark-allow-edit-commands))))
          (when (and (not allow-edit) (or (and (minibufferp) quit)
                                          (not (minibufferp))))
            (add-hook 'embark-pre-action-hook #'embark-mini-frame-disable)))))

    (advice-add #'embark--act :before #'embark-mini-frame-detect)
    (add-hook 'embark-setup-hook #'embark-mini-frame-reset)
    )

  (use-package embark-consult
    :after (embark consult)
    :hook
    (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src
** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :defer 1
  :init
  (setq which-key-idle-delay 1)
  :config
  (which-key-mode))
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-macro] . helpful-macro)
    ([remap describe-mode] . helpful-mode)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :general
    (global-leader-prefix
      "SPC" '(projectile-find-file :wk "Open file from project")
      "," '(projectile-switch-to-buffer :wk "Switch to project buffer")
      "p b" '(projectile-switch-to-buffer :wk "Switch to project buffer")
      "p f" '(projectile-find-file :wk "Open file from project")
      "p p" '(projectile-switch-project :wk "Open project")
      )
    :config
    (projectile-mode 1))
#+end_src
** Tree
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (setq
     treemacs-follow-after-init t
     treemacs-is-never-other-window t
     treemacs-sorting 'alphabetic-case-insensitive-asc
     treemacs-position     'left
     treemacs-width        35)

    (treemacs-tag-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (treemacs-git-mode 'deferred)
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit))
  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** Misc
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :hook (pre-command . savehist-mode))

  (use-package recentf
    :ensure nil
    :hook (after-init . (lambda()
              (recentf-mode 1)
              (add-to-list 'recentf-exclude no-littering-var-directory)
              (add-to-list 'recentf-exclude no-littering-etc-directory)
              (add-to-list 'recentf-exclude user-emacs-directory)
              (run-at-time nil (* 5 60) 'recentf-save-list))))

  (defalias 'yes-or-no-p 'y-or-n-p)

  (use-package vterm
    :defer t)

  ;; performance considerations
  (use-package gcmh
    :hook (after-init . gcmh-mode))
#+end_src
** Font
#+begin_src emacs-lisp
    (custom-theme-set-faces
     'user
     '(variable-pitch ((t (:family "Iosevka Aile" ;;:height 180 :weight thin
                                   ))))
     '(fixed-pitch ((t ( :family "Iosevka Extended" ;;:height 160
                         ))))
     '(default ((t ( :family "Iosevka Extended" ;;:height 160
                         ))))
     )

  ;;  (set-face-attribute 'default nil :font "Fira Code")
  ;;  (set-face-attribute 'fixed-pitch nil :font "Fira Code")
  ;;  (set-face-attribute 'variable-pitch nil :font "Noto Sans")
#+end_src
Emoji support: http://ergoemacs.org/emacs/emacs_list_and_set_font.html
#+begin_src emacs-lisp
  ;; set font for emoji
  (set-fontset-font
   t
   'symbol
   (cond
    ((member "noto color emoji" (font-family-list)) "noto color emoji")
    ((member "noto emoji" (font-family-list)) "noto emoji")
    ((member "segoe ui emoji" (font-family-list)) "segoe ui emoji")
    ((member "symbola" (font-family-list)) "symbola")
    ((member "apple color emoji" (font-family-list)) "apple color emoji"))
   ;; apple color emoji should be before symbola, but richard stallman disabled it.
   ;; gnu emacs removes color emoji support on the mac
   ;; http://ergoemacs.org/misc/emacs_macos_emoji.html
   ;;
   )

  (use-package ligature
    :demand t
    :config
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                         "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                         "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                         ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))


#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :init
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
          git-commit-major-mode 'markdown-mode)
    :config
    (use-package transient-posframe
      :demand t
      :config (transient-posframe-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package diff-hl
    :hook (after-init . global-diff-hl-mode)
    :hook (dired-mode . diff-hl-dired-mode)
    :hook (magit-pre-refresh . diff-hl-magit-pre-refresh)
    :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh))
#+end_src

** Basic editing
#+begin_src emacs-lisp
  (setq-default
   indent-tabs-mode nil
   tab-width 4
   require-final-newline t
   view-read-only t)

  ;; Controls language and format of dates
  (setq system-time-locale "en_US"
        calendar-week-start-day 1)

  (use-package emacs
    :hook (prog-mode . (lambda () (setq show-trailing-whitespace t))))

  (use-package tab-line
    :ensure nil
    :hook (after-init . (lambda()(global-tab-line-mode 1))))

  (use-package display-fill-column-indicator
    :ensure nil
    :hook (prog-mode . (lambda()(display-fill-column-indicator-mode 1))))

  (use-package ws-butler
    :hook
    (prog-mode . ws-butler-mode)
    (text-mode . ws-butler-mode)
    :init
    (setq ws-butler-trim-predicate
          (lambda (beg end)
            (not (eq 'font-lock-string-face
                     (get-text-property end 'face))))))

  (setq view-read-only t)
  ;; UTF-8 as default encoding
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)

#+end_src
** Org mode
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :hook (org-mode . visual-line-mode)
    :init
    (setq org-ellipsis " ‚ñæ"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2 ;; 0
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-startup-indented t
          org-list-indent-offset 4
          org-cycle-separator-lines 2)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    :config
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)))
    (dolist (face '((org-document-title . 2.0)
                    (org-level-1 . 1.6)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.3)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.2)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

    (use-package org-habit
      :ensure nil
      :demand t
      :init
      (setq org-habit-graph-column 60))

    (use-package org-inlinetask
      :ensure nil
      :demand t)

    (use-package org-tempo
      :ensure nil
      :demand t
      :config
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("sh" . "src sh"))))

  (use-package org-variable-pitch
    :hook (org-mode . org-variable-pitch-minor-mode))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    ;; U+E3D0-2, 4-9
    ;; #x25c9 #x25cb #x2738 #x273f ‚óâ‚óã‚ú∏‚úø
    (org-superstar-headline-bullets-list '("Óèê" "Óèë" "Óèí" "Óèî" "Óèï" "Óèñ" "Óèó" "Óèò" "Óèô")))

  (use-package olivetti
    :hook (org-mode . olivetti-mode)
    :init
    (setq olivetti-body-width 120))

  (use-package org-roam
    :general
    (global-leader-prefix
      "n" '(:ignore t :which-key "notes")
      "n l" 'org-roam-buffer-toggle
      "n f" 'org-roam-node-find
      "n g" 'org-roam-graph
      "n i" 'org-roam-node-insert
      "n c" 'org-roam-capture
      ;; Dailies
      "n d" '(:keymap org-roam-dailies-map :which-key "org-roam-dailies"))
    :init
    (setq org-roam-v2-ack t)
    :config
    (org-roam-setup)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)
    (setq org-roam-capture-ref-templates
          '(("r" "ref" plain "%?" :if-new (file+head "web/${slug}.org" "#+title: ${title}\n\n#+begin_quote\n${body}\n#+end_quote")
             :unnarrowed t))))

  (use-package org-journal
    :general
    (global-leader-prefix
      "n j" 'org-journal-new-entry)
    :custom
    (org-journal-agenda-integration t)
    (org-journal-file-format "%Y-%m-%d--%W.org")
    (org-journal-date-format "%Y-%m-%d, %A")
    (org-journal-file-type 'weekly))

  (use-package git-auto-commit-mode
    :defer t)
#+end_src
** Programming
#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :hook (prog-mode . show-paren-mode))

  (use-package linum
    :ensure nil
    :hook (prog-mode . linum-mode))

  (use-package smart-newline
    :hook (prog-mode . smart-newline-mode))

  (use-package yasnippet
    :hook (after-init . yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src
*** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :init
    (setq lsp-keymap-prefix "s-a"))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :bind ("M-h" . lsp-ui-doc-show)
    :config
    (setq lsp-ui-doc-show-with-cursor nil
          lsp-ui-doc-show-with-mouse nil
          lsp-ui-doc-position 'top ;; 'at-point
          lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-actions-icon lsp-ui-sideline-actions-icon-default
          lsp-ui-doc-max-width 80
          lsp-ui-doc-max-height 40
          lsp-headerline-breadcrumb-enable nil
          lsp-lens-enable t
          lsp-file-watch-threshold 1000000))

  (use-package lsp-treemacs
    :after lsp-mode)

  (use-package dap-mode
    :after lsp-mode
    :hook (lsp-mode . dap-mode)
    :config
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src
*** ELISP
#+begin_src emacs-lisp
  (use-package elisp-mode
    :ensure nil
    :defer t
    :hook (emacs-lisp-mode
           . (lambda ()
               (setq tab-width 2))))

  (use-package aggressive-indent
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
*** Bash/sh

#+begin_src emacs-lisp
  (use-package prog-mode
    :ensure nil
    :hook (sh-mode . lsp-deferred))
#+end_src

*** C/C++

#+begin_src emacs-lisp
  (use-package prog-mode
    :ensure nil
    :hook ((c-mode c++mode) . lsp-deferred))
#+end_src

*** CSS/LessCSS/SASS/SCSS
#+begin_src emacs-lisp
  (use-package css-mode
    :ensure nil
    :hook (css-mode . lsp-deferred))

  (use-package scss-mode
    :ensure nil
    :hook (scss-mode . lsp-deferred))

  (use-package sass-mode
    :hook (sass-mode .lsp-deferred))
#+end_src
*** HTML & Templating

#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.phtml\\'"
    :mode "\\.tpl\\.php\\'"
    :mode "\\.[agj]sp\\'"
    :mode "\\.as[cp]x\\'"
    :mode "\\.erb\\'"
    :mode "\\.mustache\\'"
    :mode "\\.djhtml\\'"
    :hook (web-mode . lsp-deferred))
#+end_src

*** Just

#+begin_src emacs-lisp
  (use-package just-mode
    :defer t)
#+end_src

*** Lua

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'"
    :hook (lua-mode . lsp-deferred))
#+end_src

*** Json

#+begin_src emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'"
    ;;:hook (json-mode . lsp-deferred)
    )
#+end_src

*** JavaScript/TypeScript

#+begin_src emacs-lisp
  (use-package js-mode
    :ensure nil
    :init (setq js-indent-level 2)
    :hook (js-mode . lsp-deferred))

  (use-package js2-mode
    :hook (js-mode . js2-minor-mode)
    :init
    (setq js-chain-indent t
          ;; Don't mishighlight shebang lines
          js2-skip-preprocessor-directives t
          ;; let flycheck handle this
          js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          ;; Flycheck provides these features, so disable them: conflicting with
          ;; the eslint settings.
          js2-strict-missing-semi-warning nil
          ;; maximum fontification
          js2-highlight-level 3
          js2-idle-timer-delay 0.15))

  (use-package typescript-mode
    :hook (typescript-mode . lsp-deferred))
#+end_src
*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :mode "\\.nix\\'"
    :config
    (setq tab-width 2))
#+end_src
*** Julia
#+begin_src emacs-lisp
(use-package julia-mode
  :interpreter "julia"
  :mode "\\.jl\\'")
(use-package julia-repl
  :hook (julia-mode . julia-repl-mode))
(use-package lsp-julia
  :defer t
  :hook (julia-mode . (lambda ()
                        (require 'lsp-julia)
                        (lsp-deferred)))
  ;;:ensure nil ;;(lsp-julia :host github :repo "non-jedi/lsp-julia")
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.5"))
#+end_src
*** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :defer t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (defun vl/lsp-extend-semantic-tokens ()
               (require 'lsp-semantic-tokens)
               (add-to-list 'lsp-semantic-token-modifier-faces
                            '("mutable" . underline))
               (remove-hook 'lsp-before-initialize-hook 'vl/lsp-extend-semantic-tokens))
    :hook (lsp-before-initialize . vl/lsp-extend-semantic-tokens))

  (use-package rustic
    :defer t
    :after (lsp-mode flycheck)
    :mode ("\\.rs$" . rustic-mode)
    :commands rustic-run-cargo-command rustic-cargo-outdated
    :init
    (setq rustic-indent-method-chain t
          lsp-rust-analyzer-highlighting-strings t
          lsp-enable-semantic-highlighting t
          lsp-semantic-tokens-apply-modifiers t)
    :config
    (with-eval-after-load 'rustic-flycheck
      (add-to-list 'flycheck-checkers 'rustic-clippy))
    (with-eval-after-load 'dap-mode
      (require 'dap-cpptools)))
#+end_src
*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . lsp-deferred)
    :config
    (add-to-list 'markdown-code-lang-modes '("rust" . rustic-mode)))
  (use-package edit-indirect
    :defer t)
  (use-package grip-mode
    :defer t)
  (use-package evil-markdown
    :defer t)
#+end_src
*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
  (use-package gitlab-ci-mode
    :defer t)
#+end_src

*** Misc
#+begin_src emacs-lisp
  (use-package direnv
    :hook (after-init . direnv-mode))

  (use-package flycheck
    :hook (after-init . global-flycheck-mode))

  (use-package flycheck-posframe
    :hook (flycheck-mode . flycheck-posframe-mode))

  (use-package flyspell
    :ensure nil
    :defer 5
    :hook (text-mode . flyspell-mode)
    :init
    (setq ;; ispell-program-name "hunspell"
          ispell-dictionary "en_US,hu_HU")
    :config
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic ispell-dictionary))

  (use-package langtool
    :defer t)

  (use-package corfu
    :hook (after-init . corfu-global-mode)
    :bind (:map corfu-map
           ("TAB" . corfu-next)
           ([tab] . corfu-next)
           ("S-TAB" . corfu-previous)
           ([backtab] . corfu-previous))
    :init
    (setq tab-always-indent 'complete)
    (defvar comint-completion-addsuffix)
    (autoload 'comint--match-partial-filename "comint")

    (defun file-name-at-point ()
      "File path completion function."
      (when (comint--match-partial-filename)
        (let ((comint-completion-addsuffix))
          (comint--complete-file-name-data))))

    (defun file-name-at-point-setup ()
      "Setup file path completion at point in string literals."
      (let ((global (memq t completion-at-point-functions)))
        (setq-local completion-at-point-functions
                    (delete-dups
                     (append completion-at-point-functions
                             (list #'file-name-at-point)
                             (and global (list t)))))))

    (add-hook 'prog-mode-hook #'file-name-at-point-setup))

  (use-package company
    :defer t
    :init
    (setq company-idle-delay nil))

  (use-package dired
    :ensure nil
    :init
    (setq dired-dwim-target t
          dired-auto-revert-buffer t
          dired-kill-when-opening-new-dired-buffer t
          dired-recursive-copies 'always
          dired-recursive-deletes 'top
          dired-listing-switches "-ahlv --group-directories-first"))

  (use-package diredfl
    :hook (dired-mode . diredfl-mode))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package dired-x
    :disabled
    :hook (dired-mode . dired-omit-mode))
#+end_src
